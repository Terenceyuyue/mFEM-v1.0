clc; clear; close all
%%% This is an exmple given in FreeFem++: Release 4.6
%   Subsection 2.7 - Irrotational Fan Blade Flow and Thermal effects 
%   (see potential.edp)
%
% Airfoil: Consider a wing profile S in a uniform flow. Infinity will be
% represented by a large circle C where the flow is assumed to be of
% uniform velocity. The domain is outside S.
%

%% Parameters
theta = 8*pi/180; 
lift = theta*0.151952/0.0872665; % lift approximation formula
uinfty1 = cos(theta);   uinfty2 = sin(theta);

%% Mesh
id = 1;
switch id
    case 1  % mesh generated by freefem++        
        %[node,elem] = getMeshFreeFEM('meshdata_airfoil.msh');
        load meshdata_airfoil
    case 2  % mesh generated by pdetool        
        [node,elem] = mesh_naca0012();
end
figure, showmesh(node,elem);
naca12 = @(x) 0.17735*sqrt(x) - 0.075597*x - 0.212836*(x.^2) ...
    + 0.17363*(x.^3) - 0.06254*(x.^4);
x = linspace(0,1,1000)';
hold on
plot(x,naca12(x),'r-','linewidth',1);
plot(x,-naca12(x),'r-','linewidth',1);
hold off
axis([-0.5 1.5 -0.5 0.5]);

% mesh info
bdStr = 'x.^2 + y.^2 > 4.5^2'; % C
Th = FeMesh2d(node,elem,bdStr);

%% Bilinear form
Vh = 'P2';  quadOrder = 7;
Coef  = 1;
Test  = 'v.grad';
Trial = 'u.grad';
kk = assem2d(Th,Coef,Test,Trial,Vh,quadOrder); 

%% Dirichlet boundary conditions
gD1 = @(p) uinfty1*p(:,2) - uinfty2*p(:,1); % on C
gD2 = @(p) -lift + 0*p(:,1);  % on S

NNdof = size(kk,1);
isBdDof = false(NNdof,1);
bdEdgeC = Th.bdEdgeType{1};   bdEdgeCIdx = Th.bdEdgeIdxType{1};
bdEdgeS = Th.bdEdgeType{2};   bdEdgeSIdx = Th.bdEdgeIdxType{2};
% on C
z1C = node(bdEdgeC(:,1),:);  z2C = node(bdEdgeC(:,2),:);
zmC = (z1C+z2C)/2;
g1C = gD1(z1C); g2C = gD1(z2C);  gmC = gD1(zmC);
% on S
z1S = node(bdEdgeS(:,1),:);  z2S = node(bdEdgeS(:,2),:);
zmS = (z1S+z2S)/2;
g1S = gD2(z1S); g2S = gD2(z2S);  gmS = gD2(zmS);
% fixedNode, fixedVal
fixedNode = [bdEdgeC(:); bdEdgeCIdx+Th.N; bdEdgeS(:); bdEdgeSIdx+Th.N];
fixedVal = [g1C; g2C; gmC; g1S; g2S; gmS];

isBdDof(fixedNode) = true;
freedof = (~isBdDof);

ff = zeros(NNdof,1);
uh = zeros(NNdof,1); uh(fixedNode) = fixedVal;
ff = ff - kk*uh;
uh(freedof) = kk(freedof,freedof)\ff(freedof);

% %% Show solution (only for freefem mesh)
% figure, 
% subplot(1,2,1), 
% showsolution(node,elem,uh(1:Th.N));
% uff = solFreeFEM('sol_airfoil.txt');
% 
% subplot(1,2,2),
% % Note: the connectivity in freefem seems not consistent with the topology
% [u1,id] = sort(uh); % u1 = uh(id);
% [idDof, ix] = sort(id); % idDof = id(ix)
% [u2,id2] = sort(uff); % u2 = u1, u2 = uff(id2)
% idff = id2(ix);
% ufh = uff(idff);
% showsolution(node,elem,ufh(1:Th.N));
% title('Numerical solution of FreeFEM++');

%% Interpolate to a 2D cartesian grid (It takes much time)
figure, 
subplot(2,1,1),
x = -0.5:0.005:1.5; y = -0.5:0.005:0.5;
varcontourf(x,y,node,elem,uh(1:Th.N),20); 
title('Numerical solution of varFEM');
subplot(2,1,2),
load sol_airfoil.mat
[node,elem] = getMeshFreeFEM('meshdata_airfoil.msh');
varcontourf(x,y,node,elem,ufh(1:size(node,1)),20); 
title('Numerical solution of FreeFEM++');