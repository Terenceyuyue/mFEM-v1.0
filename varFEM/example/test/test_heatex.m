clc; clear; close all
%%% This is an exmple given in FreeFem++: Third Edition, Version 3.58-1
%   Example 3.3 (heatex.edp)

%% Mesh
id = 1;
switch id
    case 1  % mesh generated by freefem++        
        [node,elem] = getMeshFreeFEM('meshdata_heatex.msh');
    case 2  % mesh generated by pdetool        
        load gdata_heatex.mat
        [p,e,t] = initmesh(g,'hmax',1);
        for i = 1:2
            [p,e,t] = refinemesh(g,p,e,t);
        end
        node = p'; elem = t(1:3,:)';
end

% bdStr
C0 = 'x.^2 + y.^2 > 3.8^2';
bdStr = C0; 
% mesh info
Th = FeMesh2d(node,elem,bdStr);

%% PDE data
kappa = @(p) 1 + 4*(p(:,1)<-1).*(p(:,1)>-2).*(p(:,2)<3).*(p(:,2)>-3);

%% Assemble bilinear form
Vh = 'P1'; quadOrder = 7;
Coef = kappa;  
Test = {'v.grad'};  Trial = {'u.grad'};
kk = assem2d(Th,Coef,Test,Trial,Vh,quadOrder); 

%% Apply Dirichlet boundary value conditions
N = size(node,1);
isBdDof = false(N,1);
fixedNodeC0 = Th.bdNodeIdxType{1};  
fixedNodeC1 = Th.bdNodeIdxType{2};  
fixedNode = [fixedNodeC0; fixedNodeC1];
fixedVal = [20*ones(size(fixedNodeC0)); ...
    100*ones(size(fixedNodeC1))];

isBdDof(fixedNode) = true;
freedof = (~isBdDof);

ff = zeros(N,1);
uh = zeros(N,1); uh(fixedNode) = fixedVal;
ff = ff - kk*uh;
uh(freedof) = kk(freedof,freedof)\ff(freedof);

figure, showsolution(node,elem,uh);
% view(2); colorbar;
title('Numerical solution of varFEM');

%% FreeFEM solution
if id==1
    uff = solFreeFEM('sol_heatex.txt');
    figure, showsolution(node,elem,uff);
    title('Numerical solution of FreeFEM++');
end

%% Interpolate to a 2D cartesian grid
figure, 
x = -5:0.005:5; y = -5:0.005:5;
varcontourf(x,y,node,elem,uh(1:Th.N),20); 
color = jet(10);  colormap(color);